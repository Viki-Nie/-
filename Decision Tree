#决策树算法
#首先需要导入输入输出数据，并将输入输出数据转换为标准形式
#然后使用sklearn的决策树tree进行处理
#最后输出.dot文件结果，并用Graphviz输出决策树的图形
#对已有的决策树对象，进行测试数据集predict测试
from sklearn.feature_extraction import DictVectorizer
import csv
from sklearn import tree
from sklearn import preprocessing
from sklearn.externals.six import StringIO
 
# Read in the csv file and put features into list of dict and list of class label
#allElectronicsData = open(r'E:\\AllElectronics.csv', 'rb')
allElectronicsData = open(r'E:\\AllElectronics.csv', 'rt')
reader = csv.reader(allElectronicsData)
#headers = reader.next()
headers = next(reader)
 
print(headers)
 
featureList = []
labelList = []
 
for row in reader:
    labelList.append(row[len(row)-1])
    rowDict = {}
    for i in range(1, len(row)-1):
        rowDict[headers[i]] = row[i]#headers[i]是键，row[i]是值
    featureList.append(rowDict)
 
print(featureList)
 
# Vetorize features
vec = DictVectorizer()
dummyX = vec.fit_transform(featureList) .toarray()#变成数组
#dummyX=vec.fit_transform(featureList)记录有1的位置
print("dummyX: " + str(dummyX))
#print("dummyX: ",dummyX)
print(vec.get_feature_names())
 
print("labelList: " + str(labelList))
 
# vectorize class labels
lb = preprocessing.LabelBinarizer()
dummyY = lb.fit_transform(labelList)
print("dummyY: " + str(dummyY))
 
# Using decision tree for classification
# clf = tree.DecisionTreeClassifier()
clf = tree.DecisionTreeClassifier(criterion='entropy')
clf = clf.fit(dummyX, dummyY)
print("clf: " + str(clf))
 
 
# Visualize model
with open("allElectronicInformationGainOri.dot", 'w') as f:
    f = tree.export_graphviz(clf, feature_names=vec.get_feature_names(), out_file=f)
 
oneRowX = dummyX[0, :]
print("oneRowX: " + str(oneRowX))
#将第一组数据中年龄young改为middle_age
newRowX = oneRowX
newRowX[0] = 1
newRowX[2] = 0
print("newRowX: " + str(newRowX))
#
predictedY = clf.predict(newRowX.reshape(1,-1))#需要使用reshape(1,-1)
print("predictedY: " + str(predictedY))
